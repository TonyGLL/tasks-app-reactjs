{"version":3,"sources":["components/TaskRow.js","components/TaskBanner.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TaskRow","props","key","task","name","type","checked","done","onChange","toggleTask","TaskBanner","className","userName","taskItems","filter","t","length","TaskCreator","useState","newTaskName","setNewTaskName","createNewTask","callback","value","e","target","onKeyPress","onClick","VisibilityControl","isChecked","htmlFor","description","App","setUserName","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","taskName","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAgBeA,MAdf,SAAiBC,GACb,OACI,wBAAIC,IAAMD,EAAME,KAAKC,MACjB,4BAAMH,EAAME,KAAKC,MACjB,4BACI,2BACIC,KAAK,WACLC,QAASL,EAAME,KAAKI,KACpBC,SAAW,kBAAMP,EAAMQ,WAAWR,EAAME,YCA7CO,MARf,SAAoBT,GAChB,OACI,wBAAIU,UAAU,yCACRV,EAAMW,SADZ,gBACqCX,EAAMY,UAAUC,QAAO,SAAAC,GAAC,OAAKA,EAAER,QAAMS,OAD1E,iBCoCOC,MArCf,SAAqBhB,GAAQ,IAAD,EAEciB,mBAAS,IAFvB,mBAEjBC,EAFiB,KAEJC,EAFI,KASlBC,EAAgB,WAClBpB,EAAMqB,SAASH,GACfC,EAAe,KASnB,OACI,yBAAKT,UAAU,WACX,2BACIN,KAAK,OACLM,UAAU,yBACVY,MAAQJ,EACRX,SAtBe,SAAAgB,GACvBJ,EAAeI,EAAEC,OAAOF,QAsBhBG,WAbK,SAACF,GACA,UAAVA,EAAEtB,KACFmB,OAaA,4BACIV,UAAU,0CACVgB,QAAWN,GAFf,cChBGO,MAdf,SAA2B3B,GACvB,OACI,yBAAKU,UAAU,cACX,2BACIN,KAAK,WACLM,UAAU,mBACVL,QAAUL,EAAM4B,UAChBrB,SAAW,SAAAgB,GAAC,OAAIvB,EAAMqB,SAASE,EAAEC,OAAOnB,YAE5C,2BAAOwB,QAAQ,oBAAf,QAAyC7B,EAAM8B,eC4F5CC,MAhGf,WAAe,MAGmBd,mBAAS,QAH5B,mBAGNN,EAHM,KAGIqB,EAHJ,OAKqBf,mBAAS,CACzC,CAAEd,KAAM,SAAUG,MAAM,GACxB,CAAEH,KAAM,SAAUG,MAAM,GACxB,CAAEH,KAAM,SAAUG,MAAM,GACxB,CAAEH,KAAM,SAAUG,MAAM,KATb,mBAKNM,EALM,KAKKqB,EALL,OAY6BhB,oBAAS,GAZtC,mBAYNiB,EAZM,KAYSC,EAZT,KAebC,qBAAU,WACR,IAAIC,EAAOC,aAAaC,QAAQ,SACpB,MAARF,EACFJ,EAAaO,KAAKC,MAAMJ,KAExBL,EAAY,gBACZC,EAAa,CACX,CAAE9B,KAAM,iBAAkBG,MAAM,GAChC,CAAEH,KAAM,iBAAkBG,MAAM,GAChC,CAAEH,KAAM,iBAAkBG,MAAM,GAChC,CAAEH,KAAM,iBAAkBG,MAAM,QAGnC,IAEH8B,qBAAU,WACRE,aAAaI,QAAQ,QAASF,KAAKG,UAAU/B,MAC5C,CAACA,IAEJ,IASMJ,EAAa,SAAAN,GACjB+B,EAAarB,EAAUgC,KAAI,SAAA9B,GAAC,OAAKA,EAAEX,OAASD,EAAKC,KAAhB,2BAA4BW,GAA5B,IAA+BR,MAAOQ,EAAER,OAASQ,OAG9E+B,EAAgB,SAACC,GACrB,OAAOlC,EACNC,QAAO,SAAAX,GAAI,OAAIA,EAAKI,OAASwC,KAC7BF,KAAI,SAAA1C,GAAI,OACP,kBAAC,EAAD,CAASA,KAAOA,EAAOD,IAAMC,EAAKC,KAAOK,WAAaA,QAI1D,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAYC,SAAWA,EAAWC,UAAYA,IAC9C,kBAAC,EAAD,CAAaS,SAxBK,SAAA0B,GACfnC,EAAUoC,MAAK,SAAAlC,GAAC,OAAIA,EAAEX,OAAS4C,MAClCd,EAAa,GAAD,mBAAKrB,GAAL,CAAgB,CAC1BT,KAAM4C,EACNzC,MAAM,SAqBR,2BAAOI,UAAU,sCACf,+BACE,4BACE,2CACA,sCAGJ,+BACImC,GAAc,KAGpB,yBAAKnC,UAAU,2CACb,kBAAC,EAAD,CACEoB,YAAY,kBACZF,UAAYM,EACZb,SAAW,SAAAhB,GAAO,OAAI8B,EAAiB9B,OAIzC6B,GACE,2BAAOxB,UAAU,sCACf,+BACE,4BACE,2CACA,sCAGJ,+BACImC,GAAc,OClFVI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7b99605c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TaskRow(props) {\r\n    return (\r\n        <tr key={ props.task.name }>\r\n            <td>{ props.task.name }</td>\r\n            <td>\r\n                <input \r\n                    type=\"checkbox\" \r\n                    checked={props.task.done} \r\n                    onChange={ () => props.toggleTask(props.task) } />\r\n            </td>\r\n        </tr>\r\n    )\r\n};\r\n\r\nexport default TaskRow;","import React from 'react';\r\n\r\nfunction TaskBanner(props) {\r\n    return (\r\n        <h4 className=\"bg-primary text-white text-center p-4\">\r\n            { props.userName }'s Task App ({ props.taskItems.filter(t => !t.done).length } task to do)\r\n        </h4>\r\n    );\r\n}\r\n\r\nexport default TaskBanner;","import React, { useState } from 'react';\r\n\r\n\r\nfunction TaskCreator(props) {\r\n\r\n    const [newTaskName, setNewTaskName] = useState('');\r\n\r\n    const updateNewTaskValue = e => {\r\n        setNewTaskName(e.target.value);\r\n    }\r\n    \r\n    \r\n    const createNewTask = () => {\r\n        props.callback(newTaskName)\r\n        setNewTaskName('');\r\n    }\r\n    \r\n    const keyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            createNewTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"m-4 row\">\r\n            <input \r\n                type=\"text\"\r\n                className=\"form-control p-1 col-6\"\r\n                value={ newTaskName }\r\n                onChange={ updateNewTaskValue }\r\n                onKeyPress={ keyPress }\r\n            />\r\n            <button \r\n                className=\"btn btn-primary p-1 ml-2 col-2 col-md-1\"\r\n                onClick= { createNewTask }\r\n            >Add Task</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskCreator;","import React from 'react';\r\n\r\nfunction VisibilityControl(props) {\r\n    return (\r\n        <div className=\"form-check\">\r\n            <input \r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                checked={ props.isChecked }\r\n                onChange={ e => props.callback(e.target.checked) }\r\n            />\r\n            <label htmlFor=\"form-check-label\">Show { props.description }</label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VisibilityControl;","import React, { useState, useEffect } from 'react';\n\nimport TaskRow from './components/TaskRow';\nimport TaskBanner from './components/TaskBanner';\nimport TaskCreator from './components/TaskCreator';\nimport VisibilityControl from './components/VisibilityControl';\n\nfunction App() {\n\n  // ----- USESTATES ----- //\n  const [userName, setUserName] = useState('Tony');\n\n  const [taskItems, setTaskItems] = useState([\n    { name: 'Task 1', done: false },\n    { name: 'Task 2', done: false },\n    { name: 'Task 3', done: true },\n    { name: 'Task 4', done: false }\n  ]);\n\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  // ----- USEEFFECT ----- //\n  useEffect(() => {\n    let data = localStorage.getItem('tasks');\n    if (data != null) {\n      setTaskItems(JSON.parse(data))\n    }else {\n      setUserName('Tony Example');\n      setTaskItems([\n        { name: 'Task 1 Example', done: false },\n        { name: 'Task 2 Example', done: false },\n        { name: 'Task 3 Example', done: true },\n        { name: 'Task 4 Example', done: false }\n      ]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, {\n        name: taskName,\n        done: false\n      }]);\n    }\n  }\n\n  const toggleTask = task => {\n    setTaskItems(taskItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t)));\n  }\n\n  const taskTableRows = (doneValue) => {\n    return taskItems\n    .filter(task => task.done === doneValue)  \n    .map(task => (\n      <TaskRow task={ task } key={ task.name } toggleTask={ toggleTask } />\n    ));\n  }\n\n  return (\n    <div className=\"App\">\n      <TaskBanner userName={ userName } taskItems={ taskItems } />\n      <TaskCreator callback={ createNewTask } />\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Done</th>\n          </tr>\n        </thead>\n        <tbody>\n          { taskTableRows(false) }\n        </tbody>\n      </table>\n      <div className=\"bg-secondary text-white text-center p-2\">\n        <VisibilityControl \n          description=\"Completed Tasks\"\n          isChecked={ showCompleted }\n          callback={ checked => setShowCompleted(checked) }\n        />\n      </div>\n      {\n        showCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>\n              { taskTableRows(true) }\n            </tbody>\n          </table>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}